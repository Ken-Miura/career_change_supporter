AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev

Conditions:
  IsProd: !Equals [Environment, "prod"]

Resources:
    CcsApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "ccs-alb"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - "subnet-061b6a216e31cb1f2"
              - "subnet-090373565e0ad5c52"
            SecurityGroups: 
              - !Ref EC2SecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "true"
              - 
                Key: "access_logs.s3.bucket"
                Value: !Ref S3Bucket
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "true"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref CcsApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
            Certificates: 
              - 
                CertificateArn: !Ref CertificateManagerCertificate
            DefaultActions: 
              - 
                FixedResponseConfig: 
                    MessageBody: "Access denied"
                    StatusCode: "403"
                    ContentType: "text/plain"
                Order: 1
                Type: "fixed-response"

    ElasticLoadBalancingV2ListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/${CcsApplicationLoadBalancer.LoadBalancerName}/23f3cf9684deeba1/325a273d4eb59c61"
            Conditions: 
              - 
                Field: "http-header"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Order: 1
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false
                        DurationSeconds: 3600

    ElasticLoadBalancingV2ListenerRule2:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "2"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/${CcsApplicationLoadBalancer.LoadBalancerName}/23f3cf9684deeba1/325a273d4eb59c61"
            Conditions: 
              - 
                Field: "http-header"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup2
                Order: 1
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup2
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false
                        DurationSeconds: 3600

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security Group for ALB"
            GroupName: "CcsAlbSecurityGroup"
            VpcId: "vpc-0b23fe7dd45be9bd0"
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/api/health"
            Port: 3000
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-0b23fe7dd45be9bd0"
            Name: "user-service-target-group"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup2:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/admin/api/health"
            Port: 3001
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-0b23fe7dd45be9bd0"
            Name: "admin-service-target-group"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${CcsApplicationLoadBalancer.LoadBalancerName}/23f3cf9684deeba1"
            PrivateIpAddress: "10.0.25.237"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.25.237"
                Primary: true
            SubnetId: "subnet-090373565e0ad5c52"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${CcsApplicationLoadBalancer.SecurityGroups}"

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${CcsApplicationLoadBalancer.LoadBalancerName}/23f3cf9684deeba1"
            PrivateIpAddress: "10.0.14.19"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.14.19"
                Primary: true
            SubnetId: "subnet-061b6a216e31cb1f2"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${CcsApplicationLoadBalancer.SecurityGroups}"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "ccs-application-load-balancer-logs"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Effect: "Allow"
                    Principal: 
                        AWS: "arn:aws:iam::582318560864:root"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*"

    CertificateManagerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: "api.career-change-supporter.com"
            SubjectAlternativeNames: 
              - "api.career-change-supporter.com"
            DomainValidationOptions: 
              - 
                DomainName: "api.career-change-supporter.com"
                ValidationDomain: "api.career-change-supporter.com"
            CertificateTransparencyLoggingPreference: "ENABLED"

