AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label:
          default: Required parameters
        Parameters: 
          - Environment
          - UserServiceAccessRestrictionCustomHeaderValue
          - AdminServiceAccessRestrictionCustomHeaderValue
      - 
        Label:
          default: Optional parameter
        Parameters: 
          - ServiceDomainName

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev

  ServiceDomainName:
    Type: String
    Default: career-change-supporter.com
    Description: api.${ServiceDomainName} for prod or api.dev.${ServiceDomainName} for dev is used for load balancer domain name
    AllowedPattern: ^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$

  UserServiceAccessRestrictionCustomHeaderValue:
    Type: String
    Description: Enter same value as the one you set on CloudFront for user service
    AllowedPattern: ^[a-zA-Z0-9]{32}$

  AdminServiceAccessRestrictionCustomHeaderValue:
    Type: String
    Description: Enter same value as the one you set on CloudFront for admin service
    AllowedPattern: ^[a-zA-Z0-9]{32}$

Conditions:
  IsProd: !Equals [Environment, "prod"]

Resources:
    CcsApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "ccs-alb"] ]
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "PublicSubnet1Id"] ]
              - Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "PublicSubnet2Id"] ]
            SecurityGroups: 
              - Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "AlbSecurityGroupId"] ]
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "true"
              - 
                Key: "access_logs.s3.bucket"
                Value: !Ref CcsApplicationLoadBalancerLogStorage
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    CcsApplicationLoadBalancerDnsRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: !Sub "${ServiceDomainName}." # need trailing comma
        RecordSets:
          - Name: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], !Ref ServiceDomainName ] ] # you don't have to need trailing comma because AWS handle both as same
            Type: A
            AliasTarget:
              HostedZoneId: !GetAtt 'CcsApplicationLoadBalancer.CanonicalHostedZoneID'
              DNSName: !GetAtt 'CcsApplicationLoadBalancer.DNSName'

    CcsApplicationLoadBalancerListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref CcsApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
            Certificates: 
              - 
                CertificateArn: !Ref CcsApplicationLoadBalancerCertificate
            DefaultActions: 
              - 
                FixedResponseConfig: 
                    MessageBody: "Access denied"
                    StatusCode: "403"
                    ContentType: "text/plain"
                Order: 1
                Type: "fixed-response"

    CcsApplicationLoadBalancerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], !Ref ServiceDomainName ] ]
            # DNSレコード検証のため、初回は手動で検証用のレコードを作成する必要がある。二回目以降は作成済の検証用レコードがあればすべて自動で処理される。
            # 参考: https://dev.classmethod.jp/articles/cfn-support-acm-dns-validation/
            ValidationMethod: DNS
            DomainValidationOptions: 
              - 
                DomainName: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], !Ref ServiceDomainName ] ]
                ValidationDomain: !Ref ServiceDomainName
            CertificateTransparencyLoggingPreference: "ENABLED"

    CcsUserServiceListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            ListenerArn: !Ref CcsApplicationLoadBalancerListener
            Conditions: 
              - 
                Field: "http-header"
                HttpHeaderConfig:
                  HttpHeaderName: X-Ccs-Alb-Access-Restriction
                  Values:
                    - !Sub ${UserServiceAccessRestrictionCustomHeaderValue}
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref UserServiceTargetGroup
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref UserServiceTargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false
                        DurationSeconds: 3600

    CcsAdminServiceListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "2"
            ListenerArn: !Ref CcsApplicationLoadBalancerListener
            Conditions: 
              - 
                Field: "http-header"
                HttpHeaderConfig:
                  HttpHeaderName: X-Admin-Ccs-Alb-Access-Restriction
                  Values:
                    - !Sub ${AdminServiceAccessRestrictionCustomHeaderValue}
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref AdminServiceTargetGroup
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref AdminServiceTargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false
                        DurationSeconds: 3600

    UserServiceTargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            Name: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "user-service-target-group"] ]
            TargetType: "ip"
            IpAddressType: "ipv4"
            Port: 3000
            Protocol: "HTTP"
            ProtocolVersion: "HTTP1"
            VpcId:
              Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "VpcId"] ]
            HealthCheckEnabled: true
            HealthCheckProtocol: "HTTP"
            UnhealthyThresholdCount: 2
            HealthCheckPath: "/api/health"
            HealthCheckTimeoutSeconds: 5
            HealthCheckPort: "traffic-port"
            HealthCheckIntervalSeconds: 30
            HealthyThresholdCount: 5
            Matcher: 
                HttpCode: "200"
            TargetGroupAttributes: 
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"

    AdminServiceTargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            Name: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "admin-service-target-group"] ]
            TargetType: "ip"
            IpAddressType: "ipv4"
            Port: 3001
            Protocol: "HTTP"
            ProtocolVersion: "HTTP1"
            VpcId:
              Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "VpcId"] ]
            HealthCheckEnabled: true
            HealthCheckProtocol: "HTTP"
            UnhealthyThresholdCount: 2
            HealthCheckPath: "/admin/api/health"
            HealthCheckTimeoutSeconds: 5
            HealthCheckPort: "traffic-port"
            HealthCheckIntervalSeconds: 30
            HealthyThresholdCount: 5
            Matcher: 
                HttpCode: "200"
            TargetGroupAttributes: 
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"

    CcsApplicationLoadBalancerLogStorage:
        Type: "AWS::S3::Bucket"
        DeletionPolicy: Retain
        Properties:
            BucketName: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "ccs-application-load-balancer-logs"] ]
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    CcsApplicationLoadBalancerLogStoragePolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref CcsApplicationLoadBalancerLogStorage
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Effect: "Allow"
                    Principal: 
                        AWS: "arn:aws:iam::582318560864:root"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${CcsApplicationLoadBalancerLogStorage}/AWSLogs/${AWS::AccountId}/*"

Outputs:
  UserServiceTg:
    Value: !Ref UserServiceTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-UserServiceTg"

  AdminServiceTg:
    Value: !Ref AdminServiceTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-AdminServiceTg"
