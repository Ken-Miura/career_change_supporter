AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required parameters
        Parameters:
          - Environment
          - DbMasterUsername
          - DbMasterUserPassword
          - IndexMasterUsername
          - IndexMasterUserPassword
Parameters:
  # prodの場合はスタック名に"ProdDataStore"、devの場合はスタック名に"DevDataStore"を指定する
  # ユーザー名、パスワードはNoEchoとしたいが、そうした場合後から確認できないため、NoEchoを避けている
  # (SSMでSecureStringとして一元管理も検討したが、SecureStringはCFnから作成できない、かつCFnから参照はできるが参照できるリソースの型が限定されている。従ってその利用も見送った）
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev
  DbMasterUsername:
    Type: String
  DbMasterUserPassword:
    Type: String
  IndexMasterUsername:
    Type: String
  IndexMasterUserPassword:
    Type: String
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
Resources:
  CcsDbCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      DBClusterIdentifier: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-db-cluster"]]
      DeletionProtection: !If [IsProd, true, false]
      Engine: "aurora-postgresql"
      EngineVersion: "15.4"
      DBClusterParameterGroupName: !Ref CcsDbClusterParameterGroup
      DBSubnetGroupName: !Ref CcsDbSubnetGroup
      VpcSecurityGroupIds:
        - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "DbSecurityGroupId"]]
      PreferredMaintenanceWindow: Fri:19:00-Fri:19:30
      PreferredBackupWindow: 18:00-18:30
      BackupRetentionPeriod: 7
      MasterUsername: !Ref DbMasterUsername
      MasterUserPassword: !Ref DbMasterUserPassword
      StorageEncrypted: true # デフォルトのマスターキーを利用するのでKMS IDは指定しない。SourceDBClusterIdentifierまたはSnapshotIdentifierを指定する際はこのプロパティを外すか確認する。
      EnableCloudwatchLogsExports:
        - "postgresql"
      ServerlessV2ScalingConfiguration:
        MaxCapacity: 32
        MinCapacity: 0.5
  CcsDbClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-db-cluster-parameter-group"]]
      Family: aurora-postgresql15
      Parameters:
        log_statement: all
        log_min_duration_statement: 2000
        log_min_error_statement: error
        deadlock_timeout: 10000
        log_lock_waits: 1
  CcsDbInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref CcsDbCluster
      DBInstanceClass: db.serverless
      Engine: "aurora-postgresql"
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      DBParameterGroupName: "default.aurora-postgresql15"
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      PreferredMaintenanceWindow: Fri:19:00-Fri:19:30
      PromotionTier: 0
      AvailabilityZone: !Sub "${AWS::Region}a"
      PubliclyAccessible: false
      CACertificateIdentifier: "rds-ca-ecc384-g1"
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt 'CcsRdsMonitoringRole.Arn'
  CcsRdsMonitoringRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-rds-monitoring-role"]]
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"monitoring.rds.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
  CcsDbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-db-subnet-group"]]
      SubnetIds:
        - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PrivateSubnet1Id"]]
        - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PrivateSubnet2Id"]]
  CcsCacheCluster:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      ClusterName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-cache-cluster"]]
      Engine: "redis"
      EngineVersion: "7.0"
      AutoMinorVersionUpgrade: false
      CacheNodeType: !If [IsProd, "cache.t4g.small", "cache.t4g.micro"]
      NumCacheNodes: 1 # 複数ノード用意したくなった場合、CacheClusterではなくReplicationGroupを使うように変更する
      CacheParameterGroupName: "default.redis7" # NOTE: slow-log向けのパラメータ（slowlog-log-slower-thanとslowlog-max-len）は運用しながら調整する
      CacheSubnetGroupName: !Ref CcsCacheSubnetGroup
      TransitEncryptionEnabled: false
      VpcSecurityGroupIds:
        - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "RedisSecurityGroupId"]]
      NetworkType: "ipv4"
      LogDeliveryConfigurations:
        - DestinationDetails:
            CloudWatchLogsDetails:
              LogGroup: !Ref CcsCacheEngineLogGroup
          DestinationType: "cloudwatch-logs"
          LogFormat: "json"
          LogType: "engine-log"
        - DestinationDetails:
            CloudWatchLogsDetails:
              LogGroup: !Ref CcsCacheSlowLogGroup
          DestinationType: "cloudwatch-logs"
          LogFormat: "json"
          LogType: "slow-log"
      PreferredAvailabilityZone: !Sub "${AWS::Region}a"
      PreferredMaintenanceWindow: "sat:18:00-sat:19:00"
      SnapshotRetentionLimit: 0
      SnapshotWindow: "16:00-17:00"
  CcsCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-cache-subnet-group"]]
      SubnetIds:
        - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PrivateSubnet1Id"]]
        - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PrivateSubnet2Id"]]
  CcsCacheEngineLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/elastic-cache/${ENGINE_LOG_SUFFIX}"
        - ENGINE_LOG_SUFFIX: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-redis-engine-log"]]
      RetentionInDays: 3653
  CcsCacheSlowLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/elastic-cache/${ENGINE_LOG_SUFFIX}"
        - ENGINE_LOG_SUFFIX: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-redis-slow-log"]]
      RetentionInDays: 3653
  CcsIndex:
    Type: "AWS::OpenSearchService::Domain"
    DependsOn: CcsIndexLogsResourcePolicy
    Properties:
      DomainName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index"]]
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub
              - "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAIN_NAME}/*"
              - DOMAIN_NAME: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index"]]
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: "Policy-Min-TLS-1-2-2019-07"
        CustomEndpointEnabled: false
      EngineVersion: "OpenSearch_2.9"
      ClusterConfig:
        DedicatedMasterEnabled: false # お金がかかるのでそもそも複数インスタンスは使わない。従って専用マスターノードは無効
        InstanceCount: 1
        InstanceType: !If [IsProd, "t3.medium.search", "t3.small.search"]
        WarmEnabled: false
        ZoneAwarenessEnabled: false
      VPCOptions:
        SecurityGroupIds:
          - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "OpenSearchSecurityGroupId"]]
        SubnetIds:
          - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PrivateSubnet1Id"]]
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/ab6485f8-49d9-4af0-8901-2888229d4463" # 利用するアカウントにおけるデフォルトキー。他のアカウントで使うときは書き換えが必要
      NodeToNodeEncryptionOptions:
        Enabled: true
      AdvancedOptions:
        "rest.action.multi.allow_explicit_index": "true"
        "indices.fielddata.cache.size": "35" # 検索速度に関わるパラメータのため、運用中に問題があった場合は変更する。indices.breaker.fielddata.limit のデフォルト値が40なので40以上にする場合は注意する。
        "indices.query.bool.max_clause_count": "1024"
        override_main_response_version: "false"
      EBSOptions:
        EBSEnabled: true
        VolumeType: "gp3"
        VolumeSize: !If [IsProd, 200, 100] # NOTE: InstanceTypeに応じて指定可能な最大値が変わる
        Iops: 3000
        Throughput: !If [IsProd, 250, 125] # NOTE: InstanceTypeに応じて指定可能な最大値が変わる
      CognitoOptions:
        Enabled: false
      SoftwareUpdateOptions:
        AutoSoftwareUpdateEnabled: false
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: !Ref IndexMasterUsername
          MasterUserPassword: !Ref IndexMasterUserPassword
        AnonymousAuthEnabled: false
      LogPublishingOptions:
        SEARCH_SLOW_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt CcsIndexSearchSlowLogGroup.Arn
        ES_APPLICATION_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt CcsIndexEsApplicationLogGroup.Arn
        INDEX_SLOW_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt CcsIndexIndexSlowLogGroup.Arn
        AUDIT_LOGS:
          Enabled: true
          CloudWatchLogsLogGroupArn: !GetAtt CcsIndexAuditLogGroup.Arn
  CcsIndexSearchSlowLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/opensearch/${SEARCH_SLOW_LOG_SUFFIX}"
        - SEARCH_SLOW_LOG_SUFFIX: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index-search-slow-log"]]
      RetentionInDays: 3653
  CcsIndexEsApplicationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/opensearch/${ES_APPLICATION_LOG_SUFFIX}"
        - ES_APPLICATION_LOG_SUFFIX: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index-es-application-log"]]
      RetentionInDays: 3653
  CcsIndexIndexSlowLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/opensearch/${INDEX_SLOW_LOG_SUFFIX}"
        - INDEX_SLOW_LOG_SUFFIX: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index-index-slow-log"]]
      RetentionInDays: 3653
  CcsIndexAuditLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub
        - "/opensearch/${AUDIT_LOG_SUFFIX}"
        - AUDIT_LOG_SUFFIX: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index-audit-log"]]
      RetentionInDays: 3653
  CcsIndexLogsResourcePolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-index-logs-resource-policy"]]
      PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"opensearchservice.amazonaws.com\"]},\"Action\":[\"logs:PutLogEvents\",\"logs:CreateLogStream\"],\"Resource\":\"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/opensearch/*\"}]}"
  CcsIdentityImagesBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: !If [IsProd, Retain, Delete]
    Properties:
      BucketName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-identity-images"]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
            BucketKeyEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: "BucketOwnerEnforced"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CcsIdentityImagesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref CcsIdentityImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-identity-images-policy-document-id"]]
        Statement:
          - Sid: !Join ["", [!If [IsProd, "Prod", "Dev"], "CcsIdentityImagesStatementSid"]]
            Effect: "Deny"
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${CcsIdentityImagesBucket}"
              - !Sub "arn:aws:s3:::${CcsIdentityImagesBucket}/*"
            Condition:
              StringNotEquals:
                "aws:SourceVpce":
                  Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "S3VpcEndpointId"]]
  CcsCareerImagesBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: !If [IsProd, Retain, Delete]
    Properties:
      BucketName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-career-images"]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
            BucketKeyEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: "BucketOwnerEnforced"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CcsCareerImagesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref CcsCareerImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-career-images-policy-document-id"]]
        Statement:
          - Sid: !Join ["", [!If [IsProd, "Prod", "Dev"], "CcsCareerImagesStatementSid"]]
            Effect: "Deny"
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${CcsCareerImagesBucket}"
              - !Sub "arn:aws:s3:::${CcsCareerImagesBucket}/*"
            Condition:
              StringNotEquals:
                "aws:SourceVpce":
                  Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "S3VpcEndpointId"]]
Outputs:
  DbHost:
    Value: !GetAtt CcsDbCluster.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DbHost"
  DbPort:
    Value: !GetAtt CcsDbCluster.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DbPort"
  CacheHost:
    Value: !GetAtt CcsCacheCluster.RedisEndpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-CacheHost"
  CachePort:
    Value: !GetAtt CcsCacheCluster.RedisEndpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-CachePort"
  IndexHost:
    Value: !GetAtt CcsIndex.DomainEndpoint
    Export:
      Name: !Sub "${AWS::StackName}-IndexHost"
  IdentityImagesBucketName:
    Value: !Ref CcsIdentityImagesBucket
    Export:
      Name: !Sub "${AWS::StackName}-IdentityImagesBucketName"
  CareerImagesBucketName:
    Value: !Ref CcsCareerImagesBucket
    Export:
      Name: !Sub "${AWS::StackName}-CareerImagesBucketName"
