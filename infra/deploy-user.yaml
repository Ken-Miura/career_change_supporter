AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  # prodの場合はスタック名に"ProdDeployUser"、devの場合はスタック名に"DevDeployUser"を指定する
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev
  UserAppCloudFrontDistributionArn:
    Type: String
  AdminAppCloudFrontDistributionArn:
    Type: String
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
Resources:
  # 成果物をデプロイするIAMユーザー（CD、または手動でローカルから成果物をデプロイする際に利用する）
  # CloudFormationテンプレート内でアクセスキーとシークレットキーを同時に作成できるが、その場合Secrets Mangerとの連携が必須となる。
  # Secrets Mangerはお金がかかるので使わない。従って、アクセスキーとシークレットキーはこのユーザーを作った後、Web UIから発行する。
  CcsDeployUser:
    Type: "AWS::IAM::User"
    Properties:
      UserName: !Join
        - "-"
        - - !If [IsProd, "prod", "dev"]
          - !Sub "deploy-user-${AWS::Region}"
      ManagedPolicyArns:
        - Fn::ImportValue: "ArtifactsStore-UserAppCiResultStorageAccessPolicy"
        - Fn::ImportValue: "ArtifactsStore-AdminAppCiResultStorageAccessPolicy"
        - !Ref CcsUserAppAccessPolicy
        - !Ref CcsAdminAppAccessPolicy
        - !Ref CcsCloudFrontCacheInvalidationPolicy
        - !Ref CcsBackendUpdatePolicy
  CcsUserAppAccessPolicy: # 対象バケットに対しては、CloudFrontからのアクセス制限のためのBucket Policyも設定しているため、明示的な拒否を記載してはならない
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join
        - ""
        - - !If [IsProd, "Prod", "Dev"]
          - !Sub "CcsUserAppAccessPolicy-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:*"
            Resource:
              - !Sub
                - "arn:aws:s3:::${USER_APP_BUCKET_NAME}"
                - USER_APP_BUCKET_NAME:
                    Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdStaticFiles", "DevStaticFiles"], "UserAppBucketName"]]
              - !Sub
                - "arn:aws:s3:::${USER_APP_BUCKET_NAME}/*"
                - USER_APP_BUCKET_NAME:
                    Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdStaticFiles", "DevStaticFiles"], "UserAppBucketName"]]
  CcsAdminAppAccessPolicy: # 対象バケットに対しては、CloudFrontからのアクセス制限のためのBucket Policyも設定しているため、明示的な拒否を記載してはならない
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join
        - ""
        - - !If [IsProd, "Prod", "Dev"]
          - !Sub "CcsAdminAppAccessPolicy-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:*"
            Resource:
              - !Sub
                - "arn:aws:s3:::${ADMIN_APP_BUCKET_NAME}"
                - ADMIN_APP_BUCKET_NAME:
                    Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdStaticFiles", "DevStaticFiles"], "AdminAppBucketName"]]
              - !Sub
                - "arn:aws:s3:::${ADMIN_APP_BUCKET_NAME}/*"
                - ADMIN_APP_BUCKET_NAME:
                    Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdStaticFiles", "DevStaticFiles"], "AdminAppBucketName"]]
  CcsCloudFrontCacheInvalidationPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join
        - ""
        - - !If [IsProd, "Prod", "Dev"]
          - !Sub "CcsCloudFrontCacheInvalidationPolicy-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "cloudfront:GetInvalidation"
              - "cloudfront:ListInvalidations"
              - "cloudfront:CreateInvalidation"
            Resource:
              - !Ref UserAppCloudFrontDistributionArn
              - !Ref AdminAppCloudFrontDistributionArn
  # 複数のユーザーを使う予定はないので、CloudFormation実行用ロールを作ってIAMユーザーからパスロールするような運用はしない。IAMユーザーで直接CloudFormationを実行する。
  CcsCloudFormationPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join
        - ""
        - - !If [IsProd, "Prod", "Dev"]
          - !Sub "CcsCloudFormationPolicy-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "cloudformation:ValidateTemplate"
              - "cloudformation:UpdateStack"
              - "cloudformation:CancelUpdateStack"
              - "cloudformation:RollbackStack"
              - "cloudformation:ContinueUpdateRollback"
            Resource: "*"
  CcsBackendUpdatePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join
        - ""
        - - !If [IsProd, "Prod", "Dev"]
          - !Sub "CcsEcsPolicy-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ecs:UpdateTaskSet"
              - "ecs:UpdateService"
              - "events:PutRule"
            Resource: "*"
Outputs:
  DeployUser:
    Value: !Ref CcsDeployUser
