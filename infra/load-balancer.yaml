AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev

  DomainName:
    Type: String
    Default: career-change-supporter.com
    Description: api.${DomainName} for prod or api.dev.${DomainName} for dev is used for load balancer domain name
    AllowedPattern: ^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$

Conditions:
  IsProd: !Equals [Environment, "prod"]

Resources:
    CcsApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "ccs-alb"] ]
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "PublicSubnet1Id"] ]
              - Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "PublicSubnet2Id"] ]
            SecurityGroups: 
              - Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "AlbSecurityGroupId"] ]
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "true"
              - 
                Key: "access_logs.s3.bucket"
                Value: !Ref CcsApplicationLoadBalancerLogStorage
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    CcsApplicationLoadBalancerDnsRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: !Sub "${DomainName}." # need trailing comma
        RecordSets:
          - Name: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], Ref! DomainName ] ] # you don't have to need trailing comma because AWS handle both as same
            Type: A
            AliasTarget:
              HostedZoneId: !GetAtt 'CcsApplicationLoadBalancer.CanonicalHostedZoneID'
              DNSName: !GetAtt 'CcsApplicationLoadBalancer.DNSName'

    CcsApplicationLoadBalancerListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref CcsApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
            Certificates: 
              - 
                CertificateArn: !Ref CcsApplicationLoadBalancerCertificate
            DefaultActions: 
              - 
                FixedResponseConfig: 
                    MessageBody: "Access denied"
                    StatusCode: "403"
                    ContentType: "text/plain"
                Order: 1
                Type: "fixed-response"

    CcsApplicationLoadBalancerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], Ref! DomainName ] ]
            SubjectAlternativeNames: 
              - !Join [ ".", [!If [ IsProd, "api", "api.dev" ], Ref! DomainName ] ]
            DomainValidationOptions: 
              - 
                DomainName: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], Ref! DomainName ] ]
                ValidationDomain: !Join [ ".", [!If [ IsProd, "api", "api.dev" ], Ref! DomainName ] ]
            CertificateTransparencyLoggingPreference: "ENABLED"

    CcsUserServiceListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            ListenerArn: !Ref CcsApplicationLoadBalancerListener
            Conditions: 
              - 
                Field: "http-header"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref UserServiceTargetGroup
                Order: 1
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref UserServiceTargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false
                        DurationSeconds: 3600

    CcsAdminServiceListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "2"
            ListenerArn: !Ref CcsApplicationLoadBalancerListener
            Conditions: 
              - 
                Field: "http-header"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref AdminServiceTargetGroup
                Order: 1
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref AdminServiceTargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false
                        DurationSeconds: 3600

    UserServiceTargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/api/health"
            Port: 3000
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId:
              -
                Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "VpcId"] ]
            Name: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "user-service-target-group"] ]
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    AdminServiceTargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/admin/api/health"
            Port: 3001
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId:
              -
                Fn::ImportValue: !Join [ "-", [!If [ IsProd, "ProdNetwork", "DevNetwork" ], "VpcId"] ]
            Name: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "admin-service-target-group"] ]
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    # EC2NetworkInterface:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "ELB app/${CcsApplicationLoadBalancer.LoadBalancerName}/23f3cf9684deeba1"
    #         PrivateIpAddress: "10.0.25.237"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.25.237"
    #             Primary: true
    #         SubnetId: "subnet-090373565e0ad5c52"
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - !Sub "${CcsApplicationLoadBalancer.SecurityGroups}"

    # EC2NetworkInterface2:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "ELB app/${CcsApplicationLoadBalancer.LoadBalancerName}/23f3cf9684deeba1"
    #         PrivateIpAddress: "10.0.14.19"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.14.19"
    #             Primary: true
    #         SubnetId: "subnet-061b6a216e31cb1f2"
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - !Sub "${CcsApplicationLoadBalancer.SecurityGroups}"

    CcsApplicationLoadBalancerLogStorage:
        Type: "AWS::S3::Bucket"
        DeletionPolicy: !If [ IsProd, Retain, Ref: AWS::NoValue ]
        Properties:
            BucketName: !Join [ "-", [!If [ IsProd, "prod", "dev" ], "ccs-application-load-balancer-logs"] ]
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    CcsApplicationLoadBalancerLogStoragePolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref CcsApplicationLoadBalancerLogStorage
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Effect: "Allow"
                    Principal: 
                        AWS: "arn:aws:iam::582318560864:root"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${CcsApplicationLoadBalancerLogStorage}/AWSLogs/${AWS::AccountId}/*"
