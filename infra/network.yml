AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Resources:
    CCSVPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "ccs-vpc"

    CCSPublicSubnet1:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.0.0.0/20"
            VpcId: !Ref CCSVPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "ccs-subnet-public1-${AWS::Region}a"

    CCSPublicSubnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}c"
            CidrBlock: "10.0.16.0/20"
            VpcId: !Ref CCSVPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "ccs-subnet-public2-${AWS::Region}c"

    CCSPrivateSubnet1:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt CCSPublicSubnet1.AvailabilityZone
            CidrBlock: "10.0.128.0/20"
            VpcId: !Ref CCSVPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "ccs-subnet-private1-${CCSPublicSubnet1.AvailabilityZone}"

    CCSInternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - 
                Key: "Name"
                Value: "ccs-igw"

    CCSPublicSubnetRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref CCSVPC
            Tags: 
              - 
                Key: "Name"
                Value: "ccs-rtb-public"

    CCSPrivateSubnetRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref CCSVPC
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "ccs-rtb-private1-${CCSPrivateSubnet1.AvailabilityZone}"

    # TODO: デフォルトルート？これが必要か確認する
    EC2RouteTable3:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref CCSVPC

    CCSRouteToIGW:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref CCSInternetGateway
            RouteTableId: !Ref CCSPublicSubnetRouteTable

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            GatewayId: "vpce-0aa890163c42ffaa3"
            RouteTableId: !Ref CCSPublicSubnetRouteTable

    EC2VPCEndpoint:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Gateway"
            VpcId: !Ref CCSVPC
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
            PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
            RouteTableIds: 
              - !Ref CCSPublicSubnetRouteTable
            PrivateDnsEnabled: false

    EC2VPCEndpoint2:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcEndpointType: "Interface"
            VpcId: !Ref CCSVPC
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
            PolicyDocument: |
                {
                  "Statement": [
                    {
                      "Action": "*", 
                      "Effect": "Allow", 
                      "Principal": "*", 
                      "Resource": "*"
                    }
                  ]
                }
            SubnetIds: 
              - !Ref CCSPublicSubnet2
              - !Ref CCSPublicSubnet1
            PrivateDnsEnabled: true
            SecurityGroupIds: 
              - !Ref EC2SecurityGroup6

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref CCSPrivateSubnetRouteTable
            SubnetId: !Ref CCSPrivateSubnet1

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref CCSPublicSubnetRouteTable
            SubnetId: !Ref CCSPublicSubnet2

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref CCSPublicSubnetRouteTable
            SubnetId: !Ref CCSPublicSubnet1

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for redis on elastic cache"
            GroupName: "CcsRedisSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                IpProtocol: "-1"
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup5
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                IpProtocol: "-1"
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                IpProtocol: "-1"
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for admin service on ecs"
            GroupName: "CcsAdminServiceSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup7
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 3001
                IpProtocol: "tcp"
                ToPort: 3001
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for tools"
            GroupName: "NoInboundAllowedSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup4:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for OpenSearch"
            GroupName: "CcsOpenSearchSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup5
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup5:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for user service on ecs"
            GroupName: "CcsUserServiceSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup7
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 3000
                IpProtocol: "tcp"
                ToPort: 3000
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup6:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for ssm endpoint"
            GroupName: "CcsSsmEndpointSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                IpProtocol: "-1"
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup5
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                IpProtocol: "-1"
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                IpProtocol: "-1"
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    # TODO: マネージドプリフィックスリストのCFnが入っていないので入れる
    EC2SecurityGroup7:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security Group for ALB"
            GroupName: "CcsAlbSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup8:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for database"
            GroupName: "CcsDbSecurityGroup"
            VpcId: !Ref CCSVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 5432
                IpProtocol: "tcp"
                ToPort: 5432
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup5
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 5432
                IpProtocol: "tcp"
                ToPort: 5432
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: 5432
                IpProtocol: "tcp"
                ToPort: 5432
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

