AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required parameters
        Parameters:
          - Environment
          - MinInstanceCount
          - MaxInstanceCount
          - ImageTag
          - AdminEmailAddress
          - BankCode
          - BankName
          - BankBranceCode
          - BankBranceName
          - BankAccountNumber
          - BankAccountHolderName
      - Label:
          default: Parameter basically using default value
        Parameters:
          - SystemEmailAddress
          - InquiryEmailAddress
          - ServiceDomainName
Parameters:
  # prodの場合はスタック名に"ProdUserService"、devの場合はスタック名に"DevUserService"を指定する
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev
  MinInstanceCount:
    Type: Number
    Description: Enter the minimum number of user service instances. If you want to stop the service, set 0 to this value.
    MinValue: 0
  MaxInstanceCount:
    Type: Number
    Description: Enter the maximum number of user service instances. This value must be MinInstanceCount or more.
    MinValue: 0
  ImageTag:
    Type: String
    Description: Enter ECR image tag for user service
    AllowedPattern: ^[a-f0-9]{40}$
  BankCode:
    Type: String
    Description: Enter bank code for service owner to mediate consulting fee between user and consultant.
    AllowedPattern: ^[0-9]{4}$
  BankName:
    Type: String
    Description: Enter bank name for service owner to mediate consulting fee between user and consultant.
  BankBranceCode:
    Type: String
    Description: Enter bank branch code for service owner to mediate consulting fee between user and consultant.
    AllowedPattern: ^[0-9]{3}$
  BankBranceName:
    Type: String
    Description: Enter bank branch name for service owner to mediate consulting fee between user and consultant.
  BankAccountNumber:
    Type: String
    Description: Enter bank account number for service owner to mediate consulting fee between user and consultant.
    AllowedPattern: ^[0-9]{7,8}$
  BankAccountHolderName:
    Type: String
    Description: Enter bank account holder name for service owner to mediate consulting fee between user and consultant.
  SystemEmailAddress:
    Type: String
    Default: no-reply@career-change-supporter.com
  InquiryEmailAddress:
    Type: String
    Default: inquiry-desk@career-change-supporter.com
  AdminEmailAddress:
    Type: String
    Description: Enter email address to receive notification
  ServiceDomainName:
    Type: String
    Default: career-change-supporter.com
    Description: |-
      ${ServiceDomainName} are registered for prod.
      dev.${ServiceDomainName} are registered for dev.
      In this template, those domain names are used for TOTP issuer.
    AllowedPattern: ^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
Resources:
  CcsUserService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-service"]]
      TaskDefinition: !Ref CcsUserServiceTaskDefinition # TODO: タスク定義更新後にデプロイに失敗した場合、ちゃんと古いリビジョンのものを使うのか確認
      Cluster:
        Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdApplicationCluster", "DevApplicationCluster"], "ApplicationClusterArn"]]
      LoadBalancers:
        - TargetGroupArn:
            Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdLoadBalancer", "DevLoadBalancer"], "UserServiceTg"]]
          ContainerName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-service"]]
          ContainerPort: 3000
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "UserServiceSecurityGroupId"]]
          Subnets:
            - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PublicSubnet1Id"]]
            - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdNetwork", "DevNetwork"], "PublicSubnet2Id"]]
      CapacityProviderStrategy:
        - CapacityProvider: !If [IsProd, "FARGATE", "FARGATE_SPOT"]
          Weight: 1
          Base: 0
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: "ECS"
      DesiredCount: !Ref MinInstanceCount
      HealthCheckGracePeriodSeconds: 1
      SchedulingStrategy: "REPLICA"
      PlatformVersion: "1.4.0"
  CcsUserServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-service-task"]]
      Cpu: !If [IsProd, "2048", "512"]
      Memory: !If [IsProd, "4096", "1024"]
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn:
        Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdApplicationCluster", "DevApplicationCluster"], "TaskExecutionRole"]]
      TaskRoleArn:
        Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdApplicationCluster", "DevApplicationCluster"], "TaskRole"]]
      ContainerDefinitions:
        - Name: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-service"]]
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ccs-user-service:${ImageTag}" # NOTE: image用のリポジトリは事前に作成済みであることを前提とする
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub
                - "/ecs/${ENV}-ccs-user-service"
                - ENV: !If [IsProd, "prod", "dev"]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          PortMappings:
            - ContainerPort: 3000
              Protocol: "tcp"
          Ulimits:
            - Name: "nofile" # 受け付け可能なリクエストの数（オープン可能なファイルディスクリプタの数）に関わるので大きめに変更する
              SoftLimit: 1048576
              HardLimit: 1048576
          Environment:
            - Name: "DB_HOST"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "DbHost"]]
            - Name: "DB_PORT"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "DbPort"]]
            - Name: "DB_NAME"
              Value: "ccs_db"
            - Name: "REDIS_HOST"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "CacheHost"]]
            - Name: "REDIS_PORT"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "CachePort"]]
            - Name: "AWS_S3_REGION"
              Value: !Ref AWS::Region
            - Name: "AWS_S3_ENDPOINT_URI"
              Value: !Sub "https://s3.${AWS::Region}.amazonaws.com"
            - Name: "IDENTITY_IMAGES_BUCKET_NAME"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "IdentityImagesBucketName"]]
            - Name: "CAREER_IMAGES_BUCKET_NAME"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "CareerImagesBucketName"]]
            - Name: "OPENSEARCH_ENDPOINT_URI"
              Value:
                Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdDataStore", "DevDataStore"], "IndexHost"]]
            - Name: "OPENSEARCH_AUTH"
              Value: "true"
            - Name: "SYSTEM_EMAIL_ADDRESS"
              Value: !Ref SystemEmailAddress
            - Name: "INQUIRY_EMAIL_ADDRESS"
              Value: !Ref InquiryEmailAddress
            - Name: "AWS_SES_REGION"
              Value: "us-east-1"
            - Name: "AWS_SES_ENDPOINT_URI"
              Value: "https://email.us-east-1.amazonaws.com"
            - Name: "USE_ECS_TASK_ROLE"
              Value: "true"
            - Name: "DB_USER_NAME"
              Value: "user_app"
            - Name: "SOCKET_FOR_USER_APP"
              Value: "0.0.0.0:3000"
            - Name: "URL_FOR_FRONT_END"
              Value: !Sub "https://${ServiceDomainName}"
            - Name: "TERMS_OF_USE_VERSION"
              Value: "1"
            - Name: "USER_TOTP_ISSUER"
              Value: !If [IsProd, !Sub "${ServiceDomainName}", !Sub "dev.${ServiceDomainName}"]
            - Name: "ADMIN_EMAIL_ADDRESS"
              Value: !Ref AdminEmailAddress
            - Name: "BANK_CODE"
              Value: !Ref BankCode
            - Name: "BANK_NAME"
              Value: !Ref BankName
            - Name: "BANK_BRANCH_CODE"
              Value: !Ref BankBranceCode
            - Name: "BANK_BRANCH_NAME"
              Value: !Ref BankBranceName
            - Name: "BANK_ACCOUNT_NUMBER"
              Value: !Ref BankAccountNumber
            - Name: "BANK_ACCOUNT_HOLDER_NAME"
              Value: !Ref BankAccountHolderName
          Secrets:
            - Name: "OPENSEARCH_USERNAME"
              ValueFrom: !Join ["-", [!If [IsProd, "prod", "dev"], "index-master-user"]]
            - Name: "OPENSEARCH_PASSWORD"
              ValueFrom: !Join ["-", [!If [IsProd, "prod", "dev"], "index-master-password"]]
            - Name: "DB_USER_PASSWORD"
              ValueFrom: !Join ["-", [!If [IsProd, "prod", "dev"], "db-user-app-password"]]
            - Name: "KEY_OF_SIGNED_COOKIE_FOR_USER_APP"
              ValueFrom: !Join ["-", [!If [IsProd, "prod", "dev"], "key-of-signed-cookie-for-user-app"]]
            - Name: "SKY_WAY_APPLICATION_ID"
              ValueFrom: !Join ["-", [!If [IsProd, "prod", "dev"], "sky-way-application-id"]]
            - Name: "SKY_WAY_SECRET_KEY"
              ValueFrom: !Join ["-", [!If [IsProd, "prod", "dev"], "sky-way-secret-key"]]
  CcsUserServiceAutoScalingTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: CcsUserService
    Properties:
      ServiceNamespace: ecs
      ResourceId: !Join
        - "/"
        - - service
          - Fn::ImportValue: !Join ["-", [!If [IsProd, "ProdApplicationCluster", "DevApplicationCluster"], "ApplicationCluster"]]
          - !GetAtt CcsUserService.Name
      ScalableDimension: 'ecs:service:DesiredCount'
      MinCapacity: !Ref MinInstanceCount
      MaxCapacity: !Ref MaxInstanceCount
      RoleARN:
        Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
  CcsUserServiceCpuAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-service-cpu-auto-scaling-policy"]]
      PolicyType: "TargetTrackingScaling"
      ScalingTargetId: !Ref CcsUserServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageCPUUtilization"
  CcsUserServiceMemoryAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-service-memory-auto-scaling-policy"]]
      PolicyType: "TargetTrackingScaling"
      ScalingTargetId: !Ref CcsUserServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 90.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageMemoryUtilization"
