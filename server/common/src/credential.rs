// Copyright 2021 Ken Miura

use serde::Deserialize;
use std::error::Error;
use std::fmt::Display;

/// Credential for login
///
/// This is passed from client, then generated by framework, so we cannnot check value when struct is generated.
/// Check values by [`Self::validate()`] before using this.
#[derive(Deserialize)]
pub struct Credential {
    pub email_address: String,
    pub password: String,
}

impl Credential {
    /// Validate creadential.
    pub fn validate(&self) -> Result<(), CredentialError> {
        let _ = validate_email_address(&self.email_address)?;
        let _ = validate_password(&self.password)?;
        Ok(())
    }
}

fn validate_email_address(email_address: &str) -> Result<(), CredentialError> {
    let result = crate::util::validator::validate_email_address(email_address);
    match result {
        Ok(_) => Ok(()),
        Err(e) => Err(CredentialError::InvalidEmailAddress(e)),
    }
}

fn validate_password(password: &str) -> Result<(), CredentialError> {
    let result = crate::util::validator::validate_password(password);
    match result {
        Ok(_) => Ok(()),
        Err(e) => Err(CredentialError::InvalidPassword(e)),
    }
}

/// Error related to [Credential]
#[derive(Debug)]
pub enum CredentialError {
    InvalidEmailAddress(crate::util::validator::EmailAddressValidationError),
    InvalidPassword(crate::util::validator::PasswordValidationError),
}

impl Display for CredentialError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CredentialError::InvalidEmailAddress(e) => {
                write!(f, "failed to validate email address: {}", e)
            }
            CredentialError::InvalidPassword(e) => write!(f, "failed to validate password: {}", e),
        }
    }
}

impl Error for CredentialError {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        match self {
            CredentialError::InvalidEmailAddress(e) => Some(e),
            CredentialError::InvalidPassword(e) => Some(e),
        }
    }
}
