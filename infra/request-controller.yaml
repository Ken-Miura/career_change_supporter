AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required parameters
        Parameters:
          - Environment
          - UserServiceAccessRestrictionCustomHeaderValue
          - AdminServiceAccessRestrictionCustomHeaderValue
      - Label:
          default: Optional parameter
        Parameters:
          - ServiceDomainName
Parameters:
  # prodの場合はスタック名に"ProdRequestController"、devの場合はスタック名に"DevRequestController"を指定する
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev
  ServiceDomainName:
    Type: String
    Default: career-change-supporter.com
    Description: |-
      ${ServiceDomainName} and admin.${ServiceDomainName} are registered for prod.
      dev.${ServiceDomainName} and admin.dev.${ServiceDomainName} are registered for dev.
      api.${ServiceDomainName} for prod or api.dev.${ServiceDomainName} for dev is used for api access
    AllowedPattern: ^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$
  UserServiceAccessRestrictionCustomHeaderValue:
    NoEcho: true
    Type: String
    Description: Enter same value as the one you set on ALB for user service
    AllowedPattern: ^[a-zA-Z0-9]{32}$
  AdminServiceAccessRestrictionCustomHeaderValue:
    NoEcho: true
    Type: String
    Description: Enter same value as the one you set on ALB for admin service
    AllowedPattern: ^[a-zA-Z0-9]{32}$
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
# CloudFrontで利用するACMとWAFはus-east1でしか作成できないため、us-east1で作成する
Resources:
  CcsUserServiceRequestController:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: "PriceClass_All"
        HttpVersion: "http2"
        WebACLId: !GetAtt CcsUserServiceWaf.Arn
        Aliases:
          - !If [IsProd, !Ref ServiceDomainName, !Sub "dev.${ServiceDomainName}"]
        ViewerCertificate:
          AcmCertificateArn: !Ref CcsUserServiceCertificate
          CloudFrontDefaultCertificate: false # TODO: いらない？ https://note.com/build_service/n/na69b7e292a7e
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
        Logging:
          Bucket: !Sub "${CcsUserServiceLogStorage}.s3.amazonaws.com"
          IncludeCookies: false
          Prefix: ""
        IPV6Enabled: true
        DefaultRootObject: "index.html"
        Origins:
          - Id: !Join [".", [!If [IsProd, "api", "api.dev"], !Ref ServiceDomainName]]
            DomainName: !Join [".", [!If [IsProd, "api", "api.dev"], !Ref ServiceDomainName]]
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
              HTTPSPort: 443
              OriginSSLProtocols:
                - "TLSv1.2"
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5
            OriginPath: ""
            OriginCustomHeaders:
              - HeaderName: "X-Ccs-Alb-Access-Restriction"
                HeaderValue: !Ref UserServiceAccessRestrictionCustomHeaderValue
            OriginShield:
              Enabled: false
            ConnectionAttempts: 3
            ConnectionTimeout: 10
          - Id: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-app.s3.ap-northeast-1.amazonaws.com"]]
            DomainName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-app.s3.ap-northeast-1.amazonaws.com"]]
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginShield:
              Enabled: false
            ConnectionAttempts: 3
            ConnectionTimeout: 10
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: !Join [".", [!If [IsProd, "api", "api.dev"], !Ref ServiceDomainName]]
            Compress: true
            ViewerProtocolPolicy: "https-only"
            AllowedMethods:
              - "HEAD"
              - "DELETE"
              - "POST"
              - "GET"
              - "OPTIONS"
              - "PUT"
              - "PATCH"
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # CachingDisabled policy id managed by AWS
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3" # AllViewer policy id managed by AWS
            SmoothStreaming: false
        DefaultCacheBehavior:
          TargetOriginId: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-app.s3.ap-northeast-1.amazonaws.com"]]
          Compress: true
          ViewerProtocolPolicy: "https-only"
          AllowedMethods:
            - "HEAD"
            - "GET"
          CachedMethods:
            - "HEAD"
            - "GET"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized policy id managed by AWS
          SmoothStreaming: false
        CustomErrorResponses:
          - ErrorCode: 403
            ErrorCachingMinTTL: 10
            ResponsePagePath: "/"
            ResponseCode: "200"
        Restrictions:
          GeoRestriction:
            RestrictionType: "none"
  CcsUserServiceWaf:
    Type: "AWS::WAFv2::WebACL"
    Properties:
      Name: !Join ["", [!If [IsProd, "Prod", "Dev"], "CcsCloudFrontWebAcl"]]
      Description: ""
      DefaultAction:
        Block: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Join ["", [!If [IsProd, "Prod", "Dev"], "CcsCloudFrontWebAcl"]]
      Scope: "CLOUDFRONT"
      Rules:
        - Name: "OnlyAllowFromMyIP"
          Priority: 0
          Action:
            Allow: {}
          Statement:
            OrStatement:
              Statements:
                - IPSetReferenceStatement:
                    ARN: !GetAtt CcsIpV4Set.Arn
                - IPSetReferenceStatement:
                    ARN: !GetAtt CcsIpV6Set.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "OnlyAllowFromMyIP"
  CcsUserServiceCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !If [IsProd, !Ref ServiceDomainName, !Sub "dev.${ServiceDomainName}"]
      # DNSレコード検証のため、初回は手動で検証用のレコードを作成する必要がある。二回目以降は作成済の検証用レコードがあればすべて自動で処理される。
      # 参考: https://dev.classmethod.jp/articles/cfn-support-acm-dns-validation/
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If [IsProd, !Ref ServiceDomainName, !Sub "dev.${ServiceDomainName}"]
          ValidationDomain: !Ref ServiceDomainName
      CertificateTransparencyLoggingPreference: "ENABLED"
  CcsUserServiceLogStorage:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-cloudfront-logs"]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
            BucketKeyEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: "BucketOwnerPreferred"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CcsUserServiceRequestControllerDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${ServiceDomainName}." # need trailing comma
      RecordSets:
        - Name: !If [IsProd, !Ref ServiceDomainName, !Sub "dev.${ServiceDomainName}"] # you don't have to need trailing comma because AWS handle both as same
          Type: A
          AliasTarget:
            HostedZoneId: "Z2FDTNDATAQYW2"
            DNSName: !GetAtt 'CcsUserServiceRequestController.DomainName'
        - Name: !If [IsProd, !Ref ServiceDomainName, !Sub "dev.${ServiceDomainName}"] # you don't have to need trailing comma because AWS handle both as same
          Type: AAAA
          AliasTarget:
            HostedZoneId: "Z2FDTNDATAQYW2"
            DNSName: !GetAtt 'CcsUserServiceRequestController.DomainName'
  CcsUserAppBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Join ["-", [!If [IsProd, "prod", "dev"], "ccs-user-app"]]
      PolicyDocument:
        Version: "2008-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Join [":::", ["arn:aws:s3", !If [IsProd, "prod-ccs-user-app/*", "dev-ccs-user-app/*"]]]
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CcsUserServiceRequestController}"
  # CcsAdminServiceRequestController:
  #   Type: "AWS::CloudFront::Distribution"
  #   Properties:
  #     DistributionConfig:
  #       Aliases:
  #         - "admin.career-change-supporter.com"
  #       Origins:
  #         - ConnectionAttempts: 3
  #           ConnectionTimeout: 10
  #           CustomOriginConfig:
  #             HTTPPort: 80
  #             HTTPSPort: 443
  #             OriginKeepaliveTimeout: 5
  #             OriginProtocolPolicy: "https-only"
  #             OriginReadTimeout: 30
  #             OriginSSLProtocols:
  #               - "TLSv1.2"
  #           DomainName: "api.career-change-supporter.com"
  #           Id: "api.career-change-supporter.com"
  #           OriginCustomHeaders:
  #             - HeaderName: "X-Admin-Ccs-Alb-Access-Restriction"
  #               HeaderValue: "2233ef9458ba4d7ca88886c794b75c26"
  #           OriginPath: ""
  #         - ConnectionAttempts: 3
  #           ConnectionTimeout: 10
  #           DomainName: !Sub "${S3Bucket}.s3.ap-northeast-1.amazonaws.com"
  #           Id: !Sub "${S3Bucket}.s3.ap-northeast-1.amazonaws.com"
  #           OriginPath: ""
  #           S3OriginConfig:
  #             OriginAccessIdentity: ""
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - "HEAD"
  #           - "GET"
  #         CachedMethods:
  #           - "HEAD"
  #           - "GET"
  #         Compress: true
  #         CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
  #         SmoothStreaming: false
  #         TargetOriginId: !Sub "${S3Bucket}.s3.ap-northeast-1.amazonaws.com"
  #         ViewerProtocolPolicy: "https-only"
  #       CacheBehaviors:
  #         - AllowedMethods:
  #             - "HEAD"
  #             - "DELETE"
  #             - "POST"
  #             - "GET"
  #             - "OPTIONS"
  #             - "PUT"
  #             - "PATCH"
  #           Compress: true
  #           CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
  #           OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
  #           PathPattern: "/admin/api/*"
  #           SmoothStreaming: false
  #           TargetOriginId: "api.career-change-supporter.com"
  #           ViewerProtocolPolicy: "https-only"
  #       CustomErrorResponses:
  #         - ErrorCode: 403
  #           ResponsePagePath: "/"
  #           ResponseCode: "403"
  #           ErrorCachingMinTTL: 10
  #       Comment: ""
  #       PriceClass: "PriceClass_All"
  #       Enabled: true
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref CertificateManagerCertificate2
  #         CloudFrontDefaultCertificate: false
  #         MinimumProtocolVersion: "TLSv1.2_2021"
  #         SslSupportMethod: "sni-only"
  #       Restrictions:
  #         GeoRestriction:
  #           RestrictionType: "none"
  #       WebACLId: !GetAtt WAFv2WebACL2.Arn
  #       HttpVersion: "http2"
  #       DefaultRootObject: "index.html"
  #       IPV6Enabled: true
  #       Logging:
  #         Bucket: !Sub "${S3Bucket3}.s3.amazonaws.com"
  #         IncludeCookies: false
  #         Prefix: ""
  # CloudFrontCloudFrontOriginAccessIdentity:
  #   Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
  #   Properties:
  #     CloudFrontOriginAccessIdentityConfig:
  #       Comment: "access-identity-d750795057218d47535f0b418ccbb4f6.s3.ap-northeast-1.amazonaws.com"
  # CloudFrontOriginAccessControl:
  #   Type: "AWS::CloudFront::OriginAccessControl"
  #   Properties:
  #     OriginAccessControlConfig:
  #       Name: !Sub "${S3Bucket2}.s3.ap-northeast-1.amazonaws.com"
  #       OriginAccessControlOriginType: "s3"
  #       SigningBehavior: "always"
  #       SigningProtocol: "sigv4"
  # CloudFrontOriginAccessControl2:
  #   Type: "AWS::CloudFront::OriginAccessControl"
  #   Properties:
  #     OriginAccessControlConfig:
  #       Name: !Sub "${S3Bucket}.s3.ap-northeast-1.amazonaws.com"
  #       OriginAccessControlOriginType: "s3"
  #       SigningBehavior: "always"
  #       SigningProtocol: "sigv4"
  # S3BucketPolicy:
  #   Type: "AWS::S3::BucketPolicy"
  #   Properties:
  #     Bucket: !Ref S3Bucket
  #     PolicyDocument:
  #       Version: "2008-10-17"
  #       Id: "PolicyForCloudFrontPrivateContent"
  #       Statement:
  #         - Sid: "AllowCloudFrontServicePrincipal"
  #           Effect: "Allow"
  #           Principal:
  #             Service: "cloudfront.amazonaws.com"
  #           Action: "s3:GetObject"
  #           Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  #           Condition:
  #             StringEquals:
  #               "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CcsAdminServiceRequestController}"
  # WAFv2WebACL2:
  #   Type: "AWS::WAFv2::WebACL"
  #   Properties:
  #     Name: "AdminCcsCloudFrontWebAcl"
  #     Description: ""
  #     DefaultAction:
  #       Block: {}
  #     VisibilityConfig:
  #       SampledRequestsEnabled: true
  #       CloudWatchMetricsEnabled: true
  #       MetricName: "AdminCcsCloudFrontWebAcl"
  #     Scope: "CLOUDFRONT"
  #     Rules:
  #       - Name: "OnlyAllowFromMyIP"
  #         Priority: 0
  #         Action:
  #           Allow: {}
  #         Statement:
  #           OrStatement:
  #             Statements:
  #               - IPSetReferenceStatement:
  #                   ARN: !GetAtt CcsIpV4Set.Arn
  #               - IPSetReferenceStatement:
  #                   ARN: !GetAtt CcsIpV6Set.Arn
  #         VisibilityConfig:
  #           SampledRequestsEnabled: true
  #           CloudWatchMetricsEnabled: true
  #           MetricName: "OnlyAllowFromMyIP"
  # S3Bucket3:
  #   Type: "AWS::S3::Bucket"
  #   Properties:
  #     BucketName: "admin-ccs-cloudfront-logs"
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: "AES256"
  #           BucketKeyEnabled: true
  #     OwnershipControls:
  #       Rules:
  #         - ObjectOwnership: "BucketOwnerPreferred"
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true
  #   CertificateManagerCertificate2:
  #     Type: "AWS::CertificateManager::Certificate"
  #     Properties:
  #       DomainName: "admin.career-change-supporter.com"
  #       SubjectAlternativeNames:
  #         - "admin.career-change-supporter.com"
  #       DomainValidationOptions:
  #         - DomainName: "admin.career-change-supporter.com"
  #           ValidationDomain: "admin.career-change-supporter.com"
  #       CertificateTransparencyLoggingPreference: "ENABLED"
  #   Route53RecordSet3:
  #     Type: "AWS::Route53::RecordSet"
  #     Properties:
  #       Name: !Sub "admin.${Route53RecordSet}"
  #       Type: "A"
  #       AliasTarget:
  #         HostedZoneId: "Z2FDTNDATAQYW2"
  #         DNSName: !Sub "${CcsAdminServiceRequestController.DomainName}."
  #         EvaluateTargetHealth: false
  #       HostedZoneId: "Z027771334FILNAP83QUT"
  #   Route53RecordSet4:
  #     Type: "AWS::Route53::RecordSet"
  #     Properties:
  #       Name: !Sub "admin.${Route53RecordSet}"
  #       Type: "AAAA"
  #       AliasTarget:
  #         HostedZoneId: "Z2FDTNDATAQYW2"
  #         DNSName: !Sub "${CcsAdminServiceRequestController.DomainName}."
  #         EvaluateTargetHealth: false
  #       HostedZoneId: "Z027771334FILNAP83QUT"
  CcsIpV4Set:
    Type: "AWS::WAFv2::IPSet"
    Properties:
      Name: !Join ["", [!If [IsProd, "Prod", "Dev"], "MyIpV4"]]
      Description: ""
      IPAddressVersion: "IPV4"
      Addresses:
        - "106.72.35.128/32"
      Scope: "CLOUDFRONT"
  CcsIpV6Set:
    Type: "AWS::WAFv2::IPSet"
    Properties:
      Name: !Join ["", [!If [IsProd, "Prod", "Dev"], "MyIpV6"]]
      Description: ""
      IPAddressVersion: "IPV6"
      Addresses:
        - "240b:0010:2380:5800:4cc2:b27c:9666:7d33/128"
        - "240b:0010:2380:5800:a057:65c8:dd72:542d/128"
      Scope: "CLOUDFRONT"

# S3の方から一時コピー
# S3BucketPolicy:
#     Type: "AWS::S3::BucketPolicy"
#     Properties:
#         Bucket: !Ref CcsUserAppStore
#         PolicyDocument: 
#             Version: "2008-10-17"
#             Id: "PolicyForCloudFrontPrivateContent"
#             Statement: 
#               - 
#                 Sid: "AllowCloudFrontServicePrincipal"
#                 Effect: "Allow"
#                 Principal: 
#                     Service: "cloudfront.amazonaws.com"
#                 Action: "s3:GetObject"
#                 Resource: !Sub "arn:aws:s3:::${CcsUserAppStore}/*"
#                 Condition: 
#                     StringEquals: 
#                         "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/E1BL2NRJQYGUK9"

# CcsUserAppBucketPolicy:
#     Type: "AWS::S3::BucketPolicy"
#     Properties:
#         Bucket: !Ref CcsAdminAppStore
#         PolicyDocument: 
#             Version: "2008-10-17"
#             Id: "PolicyForCloudFrontPrivateContent"
#             Statement: 
#               - 
#                 Sid: "AllowCloudFrontServicePrincipal"
#                 Effect: "Allow"
#                 Principal: 
#                     Service: "cloudfront.amazonaws.com"
#                 Action: "s3:GetObject"
#                 Resource: !Sub "arn:aws:s3:::${CcsAdminAppStore}/*"
#                 Condition: 
#                     StringEquals: 
#                         "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/E3GETAQTKY7CA5"
